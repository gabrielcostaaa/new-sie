generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model event {
  event_id                            Int                 @id @default(autoincrement())
  event_title                         String              @db.VarChar(200)
  event_description                   String?             @db.LongText
  event_partnership                   String?             @db.VarChar(500)
  event_max_registrations             Int
  event_num_registrations             Int
  event_location                      String              @db.VarChar(100)
  event_city                          String              @db.VarChar(100)
  event_project_number                String?             @db.VarChar(20)
  event_certificate_start_number      Int?
  event_certificate_end_number        Int?
  event_image                         String?             @db.LongText
  user_id                             Int
  event_declaration                   Int                 @default(0)
  event_document_attachment           Int?
  event_content_choice                Int?
  event_segment                       Int?
  event_header_image                  String?             @db.LongText
  event_signature_image               String?             @db.LongText
  document_orientations_path          String?             @db.LongText
  document_orientations_description_1 String?             @db.LongText
  document_orientations_description_2 String?             @db.LongText
  event_conclusion                    Int
  event_end_date                      String
  event_end_time                      String
  event_registration_end_date         String
  event_registration_end_time         String
  event_registration_start_date       String
  event_registration_start_time       String
  event_start_date                    String
  event_start_time                    String
  event_confirm_registration          Int                 @default(0)
  event_qr_code                       String              @unique(map: "Event_event_qr_code_key")
  eventregistration                   eventregistration[]
  avaliations                         avaliation[]        @relation("EventAvaliations")  // Adiciona a relação nomeada aqui
}

model eventregistration {
  registration_id       Int      @id @default(autoincrement())
  user_id               Int
  event_id              Int
  registration_qr_code  String   @unique(map: "EventRegistration_registration_qr_code_key")
  registration_status   Int      @default(1)
  registration_date     DateTime @default(now())
  presence_confirmed    Boolean  @default(false)
  registration_feedback String?
  event                 event    @relation(fields: [event_id], references: [event_id], onDelete: Cascade, map: "EventRegistration_event_id_fkey")
  user                  user     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "EventRegistration_user_id_fkey")

  @@unique([user_id, event_id], map: "EventRegistration_user_id_event_id_key")
  @@index([event_id], map: "EventRegistration_event_id_fkey")
}

model permission {
  permission_id   Int              @id @default(autoincrement())
  permission_name String           @unique(map: "Permission_permission_name_key")
  description     String?
  userpermission  userpermission[]
}

model user {
  user_id            Int                 @id @default(autoincrement())
  user_name          String
  user_password      String
  user_cpf           String              @unique(map: "User_user_cpf_key")
  user_rg            String
  user_email         String              @unique(map: "User_user_email_key")
  user_number        String
  user_nationality   String
  user_state         String
  user_city          String
  user_occupation    String
  user_city_work     String
  user_entity        String
  user_number_work   String?
  user_createdAt     DateTime            @default(now())
  user_updatedAt     DateTime
  user_isDeleted     Boolean             @default(false)
  user_avatar        String?
  user_date_of_birth String              @default("")
  user_termsAccepted Boolean             @default(false)
  eventregistration  eventregistration[]
  userpermission     userpermission[]
  avaliations                         avaliation[]        @relation("UserAvaliations")
}

model userpermission {
  user_id       Int
  permission_id Int
  assignedAt    DateTime   @default(now())
  permission    permission @relation(fields: [permission_id], references: [permission_id], onDelete: Cascade, map: "UserPermission_permission_id_fkey")
  user          user       @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "UserPermission_user_id_fkey")

  @@id([user_id, permission_id])
  @@index([permission_id], map: "UserPermission_permission_id_fkey")
}

model avaliation {
  avaliation_id  Int     @id @default(autoincrement())
  user_id        Int
  event_id       Int
  estrutura      Int
  organizacao    Int
  conteudo       Int
  palestrantes   Int
  total_rating    Int
  feedback       String?   // Texto de feedback adicional
  createdAt      DateTime @default(now())
  event          event     @relation("EventAvaliations", fields: [event_id], references: [event_id], onDelete: Cascade)  // Define a relação nomeada
  user           user      @relation("UserAvaliations", fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id, event_id], map: "Avaliation_user_id_event_id_key")
}
