// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       Int               @id @default(autoincrement()) // ID único para cada usuário, gerado automaticamente com autoincrement
  user_name     String
  user_password String
  user_cpf      String            @unique // CPF do usuário, deve ser único para garantir a identificação individual
  user_rg       String
  user_email    String            @unique // Email do usuário, deve ser único para evitar duplicação de contas
  user_number   String
  user_nationality String
  user_state    String
  user_city     String
  user_occupation String
  user_city_work String
  user_entity   String
  user_number_work String?
  user_avatar   String?
  user_createdAt DateTime         @default(now())   // Data e hora de criação do registro, padrão é a data e hora atuais
  user_updatedAt DateTime         @updatedAt // Data e hora da última atualização do registro, atualizado automaticamente
  user_isDeleted Boolean          @default(false) // Campo para exclusão lógica, padrão é false (não deletado)
  
  permissions   UserPermission[]
}

model Permission {
  permission_id   Int               @id @default(autoincrement()) // ID único para cada permissão, gerado automaticamente com autoincrement
  permission_name String            @unique // Nome da permissão, deve ser único para evitar duplicação
  description     String?           // Descrição opcional da permissão
  
  users           UserPermission[]
}

model UserPermission {
  user_id       Int
  permission_id Int
  assignedAt    DateTime            @default(now()) // Data e hora de atribuição da permissão, padrão é a data e hora atuais
  
  user          User                @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  permission    Permission          @relation(fields: [permission_id], references: [permission_id], onDelete: Cascade)
  
  @@id([user_id, permission_id])
}

model Event {
  event_id                Int      @id @default(autoincrement())
  event_title             String  @db.VarChar(200)  //O Título do Evento, não pode ser NULL
  event_description       String?  @db.LongText     //A Descrição nao é obrigatória
  event_partnership       String?  @db.VarChar(500) //Parcerias também não são obrigatórias
  event_max_registrations Int                       //Limite de participantes no evento, sendo obrigatório seu registro e alterável até o inicio do evento
  event_num_registrations Int?                      //Contador de quantos participantes vão participar, a cada inscrição feita ou cancelada ele atualiza, inicialmente podendo ser NULL
  event_registration_start_datetime   DateTime         //Dia e hora de Inicio para inscrições do evento, obrigatório
  event_registration_end_datetime     DateTime         //Obrigatório prencher a data e hora final de inscrição, podendo também alterar, essa data nao pode ser maior que a data de inicio        
  event_start_datetime        DateTime                 //Data e hora de inicio do evento, obrigatório
  event_end_datetime          DateTime                 //Data e hora de encerramento do evento, obrigatório
  event_location          String  @db.VarChar(100) //Obrigatório a Localização do evento
  event_city              String  @db.VarChar(100) //Municipio onde ira ocorrer o evento
  event_project_number    String?  @db.VarChar(20) //Não é obrigatório
  event_certificate_start_number Int?              //Se emitir certificado, é para gerar um intervalo de numero de certificado (para ser unico a cada usuario), gerado assim que o evento é concluido
  event_certificate_end_number   Int?              //Número final do intervalo de certificado
  event_image             String?  @db.LongText    //Caminho para imagem do evento
  user_id                 Int                      //Usuário Administrador do sistema que criou o evento, obrigatório
  event_declaration       Int      @default(0)     //Um boleano, quando 0 o evento emite Certificado, quando 1 o evento emite Declaração, obrigatório
  event_document_attachment Int?                   //Um boleano checkbox, Documentos Obrigatórios para Anexar
  event_content_choice    Int?                     //Um boleano checkbox, Participante pode escolher evento
  event_segment           Int?                     //Um boleano checkbox, Haverá escolha de segmentos, podendo destinar a qual publico é o evento
  event_header_image      String?  @db.LongText    //Para anexar cabeçalho ao certificado, estudar aplicabilidade
  event_signature_image   String?  @db.LongText    //Para anexar assinatura ao certificado, estudar aplicabilidade
  document_orientations_path           String?  @db.LongText    //Anexo de Orientações
  document_orientations_description_1        String?  @db.LongText    //Descrição 1 de orientações
  document_orientations_description_2      String?  @db.LongText    //Descrição 2 de orientações
  event_conclusion        Int                     //Um boelando, se 0 o evento nao foi concluido, se 1 o evento foi concluido, ja fica em 0 quando cria
}

